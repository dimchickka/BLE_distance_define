import numpy as np
import pandas as pd
import joblib
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error, mean_squared_error

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
POLY_DEGREE = 2         # –ü–æ–ª–∏–Ω–æ–º 2-–π —Å—Ç–µ–ø–µ–Ω–∏
MODEL_PATH = "poly_distance_model.pkl"
SCALER_PATH = "poly_transformer.pkl"

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_data(filename):
    df = pd.read_csv(filename, header=None, names=['distance', 'rssi'])
    return df['distance'].values, df['distance'].values, df['rssi'].values

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    _, distances_true, rssi_values = load_data("TestData.txt")
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rssi_values)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ—á–µ–∫")

    # --- –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞ ---
    model = joblib.load(MODEL_PATH)
    poly = joblib.load(SCALER_PATH)

    # --- –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ ---
    X_test = rssi_values.reshape(-1, 1)
    X_poly_test = poly.transform(X_test)

    # --- –®–∞–≥ 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ---
    predictions = model.predict(X_poly_test)

    # --- –®–∞–≥ 5: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ ---
    mse = mean_squared_error(distances_true, predictions)
    mae_total = mean_absolute_error(distances_true, predictions)

    print(f"\nüß™ –û–±—â–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤—Å—ë–º –Ω–∞–±–æ—Ä–µ:")
    print(f"   MSE = {mse:.4f} –º¬≤")
    print(f"   MAE = {mae_total:.4f} –º\n")

    # --- –®–∞–≥ 6: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ ---
    unique_distances = np.unique(distances_true)
    distance_wise_mae = {}

    for d in unique_distances:
        mask = (distances_true == d)
        y_true_by_d = distances_true[mask]
        y_pred_by_d = predictions[mask]
        mae_by_d = mean_absolute_error(y_true_by_d, y_pred_by_d)
        distance_wise_mae[d] = mae_by_d

    # --- –®–∞–≥ 7: –í—ã–≤–æ–¥ MAE –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º ---
    print("üß™ MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:")
    for dist, mae in sorted(distance_wise_mae.items()):
        print(f"{dist:.2f} –º: MAE = {mae:.4f} –º")

    # --- –®–∞–≥ 8: –ì—Ä–∞—Ñ–∏–∫ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ---
    plt.figure(figsize=(14, 6))
    plt.plot(distances_true, label='–ò—Å—Ç–∏–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', alpha=0.8, linewidth=2)
    plt.plot(predictions, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–µ–π', alpha=0.95, linewidth=2)

    plt.title(f"–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è 2-–π —Å—Ç–µ–ø–µ–Ω–∏\nMSE: {mse:.4f} –º¬≤, MAE: {mae_total:.4f} –º")
    plt.xlabel("–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞")
    plt.ylabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º)")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()