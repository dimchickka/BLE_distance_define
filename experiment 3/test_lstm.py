# test_lstm.py
from sklearn.metrics import mean_absolute_error
import collections
import torch
import numpy as np
import pandas as pd
import joblib
import matplotlib.pyplot as plt
from train_lstm import DistanceLSTM  # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏

# === –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
SEQ_LENGTH = 10      # –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
MODEL_PATH = "lstm_distance_model.pth"
SCALER_X_PATH = "scaler_x.pkl"
SCALER_Y_PATH = "scaler_y.pkl"

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
def load_test_data(filename):
    df = pd.read_csv(filename, header=None, names=['distance', 'rssi'])
    return df['rssi'].values, df['distance'].values

# === –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ===
def create_sequences_grouped_by_distance(rssi_values, distance_values, seq_length=10):
    X, y = [], []

    unique_distances = np.unique(distance_values)

    for dist in unique_distances:
        mask = (distance_values == dist)
        rssi_group = rssi_values[mask]
        distance_group = distance_values[mask]

        for i in range(seq_length, len(rssi_group)):
            X.append(rssi_group[i-seq_length:i])
            y.append(distance_group[i])

    return np.array(X), np.array(y)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π ===
def predict(model, scaler_X, scaler_y, sequence):
    X_scaled = scaler_X.transform(sequence.reshape(-1, 1))
    tensor = torch.tensor(X_scaled, dtype=torch.float32).unsqueeze(0)  # batch_size = 1
    with torch.no_grad():
        prediction = model(tensor)
    return scaler_y.inverse_transform(prediction.numpy().reshape(-1, 1))[0][0]

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
    rssi_values, true_distances = load_test_data("TestData.txt")

    # --- –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π ---
    X_test, y_test = create_sequences_grouped_by_distance(rssi_values, true_distances, SEQ_LENGTH)

    print(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(X_test)}")

    # --- –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ —Å–∫–∞–ª–µ—Ä–æ–≤ ---
    model = DistanceLSTM(input_size=1, hidden_size=64, num_layers=2, output_size=1)
    model.load_state_dict(torch.load(MODEL_PATH))
    model.eval()

    scaler_X = joblib.load(SCALER_X_PATH)
    scaler_y = joblib.load(SCALER_Y_PATH)

    # --- –®–∞–≥ 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ---
    predictions = []
    for i in range(len(X_test)):
        sequence = X_test[i]
        predicted_distance = predict(model, scaler_X, scaler_y, sequence)
        predictions.append(predicted_distance)

    predictions = np.array(predictions)
    true_distances_aligned = y_test  # –£–∂–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç –ø–æ –¥–ª–∏–Ω–µ

    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–∏–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {len(true_distances_aligned)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {len(predictions)}")

    # === –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é ===
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
    distance_to_true_pred = collections.defaultdict(lambda: {"true": [], "pred": []})

    for true_val, pred_val in zip(true_distances_aligned, predictions):
        distance_to_true_pred[round(true_val, 2)]["true"].append(true_val)
        distance_to_true_pred[round(true_val, 2)]["pred"].append(pred_val)

    # –°—á–∏—Ç–∞–µ–º MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    print("\nüìè MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:")
    all_mae = []
    for dist in sorted(distance_to_true_pred.keys()):
        true_vals = distance_to_true_pred[dist]["true"]
        pred_vals = distance_to_true_pred[dist]["pred"]
        mae = mean_absolute_error(true_vals, pred_vals)
        all_mae.append(mae)
        print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist:.2f} –º ‚Äî MAE: {mae:.4f} –º")

    # –û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è MAE (–Ω–µ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è)
    avg_mae = np.mean(all_mae)
    print(f"\nüìä –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MAE –ø–æ –≤—Å–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º: {avg_mae:.4f} –º")

    # === –ì—Ä–∞—Ñ–∏–∫ ===
    plt.figure(figsize=(14, 6))
    plt.plot(true_distances_aligned, label='–ò—Å—Ç–∏–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', alpha=0.8, linewidth=2)
    plt.plot(predictions, label='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ LSTM', alpha=0.95, linewidth=2)
    plt.title("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è —á–µ—Ä–µ–∑ LSTM")
    plt.xlabel("–ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    plt.ylabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º)")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()