import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞ ===
Q = 0.03      # –®—É–º –º–æ–¥–µ–ª–∏
R = 18.05     # –®—É–º –∏–∑–º–µ—Ä–µ–Ω–∏–π (–æ—Å—Ç–∞—ë—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)
P0 = 100      # –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å

WINDOW_SIZE = 10          # –†–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
RESET_THRESHOLD_BASE = 3.0  # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ —Å–±—Ä–æ—Å–∞
K_FACTOR = 20.0            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –¥–∏—Å–ø–µ—Ä—Å–∏–∏

# === –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º —Å–±—Ä–æ—Å–∞ ===
class AdaptiveKalmanFilter1D:
    def __init__(self, process_variance=Q, measurement_variance=R, initial_error=P0, reset_threshold_base=RESET_THRESHOLD_BASE):
        self.Q = process_variance
        self.R = measurement_variance
        self.P = initial_error
        self.reset_threshold_base = reset_threshold_base
        self.x = None  # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    def filter(self, data):
        filtered = []

        for i, z in enumerate(data):
            if self.x is None:
                self.x = z  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            else:
                # –ü—Ä–æ–≥–Ω–æ–∑
                x_pred = self.x
                P_pred = self.P + self.Q

                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –≤ –æ–∫–Ω–µ
                window_start = max(0, i - WINDOW_SIZE)
                current_window = data[window_start:i+1]
                local_var = np.var(current_window)

                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ —Å–±—Ä–æ—Å–∞: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∏—Å–ø–µ—Ä—Å–∏–∏
                dynamic_reset_threshold = K_FACTOR * np.sqrt(local_var)

                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∫–∞—á–∫–∞
                if abs(z - x_pred) > dynamic_reset_threshold:
                    print(f"üîÑ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —à–∞–≥–µ {i}, –ø–æ—Ä–æ–≥ = {dynamic_reset_threshold:.2f}")
                    self.x = z
                    self.P = P0
                else:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    K = P_pred / (P_pred + self.R)
                    self.x = x_pred + K * (z - x_pred)
                    self.P = (1 - K) * P_pred

            filtered.append(self.x)
        return filtered

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_data(filename):
    df = pd.read_csv(filename, header=None, names=['distance', 'rssi'])
    return df

# === –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ===
def group_and_filter(df, kalman_filter_class):
    result = defaultdict(list)
    for distance, group in df.groupby('distance'):
        rssi_values = group['rssi'].values
        kf = kalman_filter_class()
        filtered = kf.filter(rssi_values)
        result[distance] = filtered
    return result

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Learning –∏ Test —Ñ–∞–π–ª—ã ===
def save_to_file(data_dict, learning_file="LearningData.txt", test_file="TestData.txt"):
    with open(learning_file, 'w') as lfile, open(test_file, 'w') as tfile:
        for distance, values in data_dict.items():
            split_idx = int(len(values) * 0.7)
            learning_part = values[:split_idx]
            test_part = values[split_idx:]

            for val in learning_part:
                lfile.write(f"{distance},{val:.2f}\n")
            for val in test_part:
                tfile.write(f"{distance},{val:.2f}\n")

    print(f"‚úÖ –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {learning_file}")
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {test_file}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    filename = "../data.txt"
    df = load_data(filename)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
    filtered_by_distance = group_and_filter(df, AdaptiveKalmanFilter1D)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã
    save_to_file(filtered_by_distance)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏—Å–ø–µ—Ä—Å–∏–π (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    variances = {d: np.var(vals) for d, vals in filtered_by_distance.items()}
    distances = sorted(variances.keys())
    variance_values = [variances[d] for d in distances]

    plt.figure(figsize=(12, 6))
    plt.plot(distances, variance_values, marker='o', linestyle='-', color='blue')
    plt.title("–î–∏—Å–ø–µ—Ä—Å–∏—è RSSI –ø–æ—Å–ª–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞")
    plt.xlabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º)")
    plt.ylabel("–î–∏—Å–ø–µ—Ä—Å–∏—è RSSI")
    plt.grid(True)
    plt.tight_layout()
    plt.show()