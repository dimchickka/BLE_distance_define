import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.utils import shuffle
from itertools import product
import matplotlib.pyplot as plt
import joblib
import os
from collections import defaultdict

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ===
SEQ_LENGTH_OPTIONS = [5, 10, 15]  # –î–ª–∏–Ω–∞ –æ–∫–Ω–∞
N_ESTIMATORS_OPTIONS = [50, 100, 150]  # –ö–æ–ª-–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤
MAX_DEPTH_OPTIONS = [None, 10, 20]  # –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤—å–µ–≤ (None = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)

# === –ü—É—Ç—å –∫ –æ–±—É—á–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º ===
DATA_FILES = [
    ('LearningDataForLSTMFar.txt', 'Test_Far_Ready.txt'),
    # —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ (–∏–º—è_–æ–±—É—á–∞—é—â–µ–≥–æ, –∏–º—è_—Ç–µ—Å—Ç–æ–≤–æ–≥–æ)
]

EXPERIMENT_RESULTS = []

for data_file, test_file in DATA_FILES:
    print(f"\nüîç –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏: {data_file}")

    df_train = pd.read_csv(data_file, header=None, names=["distance", "rssi"])
    df_test = pd.read_csv(test_file, header=None, names=["distance", "rssi"])

    for seq_len, n_trees, max_depth in product(SEQ_LENGTH_OPTIONS, N_ESTIMATORS_OPTIONS, MAX_DEPTH_OPTIONS):
        X_train, y_train = [], []
        for dist in df_train['distance'].unique():
            rssi_values = df_train[df_train['distance'] == dist]['rssi'].values
            for i in range(seq_len, len(rssi_values)):
                window = rssi_values[i - seq_len:i]
                X_train.append(window)
                y_train.append(dist)

        X_test, y_test = [], []
        for dist in df_test['distance'].unique():
            rssi_values = df_test[df_test['distance'] == dist]['rssi'].values
            for i in range(seq_len, len(rssi_values)):
                window = rssi_values[i - seq_len:i]
                X_test.append(window)
                y_test.append(dist)

        if len(X_train) == 0 or len(X_test) == 0:
            print(f"[!] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (SEQ={seq_len}, trees={n_trees}, depth={max_depth}) ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            continue

        X_train, y_train = shuffle(np.array(X_train), np.array(y_train), random_state=42)
        X_test, y_test = np.array(X_test), np.array(y_test)

        model = RandomForestRegressor(n_estimators=n_trees, max_depth=max_depth, random_state=42)
        model.fit(X_train, y_train)

        y_pred = model.predict(X_test)

        # –û–±—â–∏–π MAE
        overall_mae = mean_absolute_error(y_test, y_pred)

        # MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        mae_by_distance = defaultdict(list)
        for true, pred in zip(y_test, y_pred):
            mae_by_distance[true].append(abs(true - pred))

        print(f"\nüå≤ Random Forest (SEQ={seq_len}, trees={n_trees}, depth={max_depth})")
        print("üìè MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:")
        for dist in sorted(mae_by_distance.keys()):
            mae = np.mean(mae_by_distance[dist])
            print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist:.2f} –º ‚Äî MAE: {mae:.4f} –º")

        print(f"\nüìä –û–±—â–∏–π MAE: {overall_mae:.4f} –º")

        EXPERIMENT_RESULTS.append({
            "seq_len": seq_len,
            "n_trees": n_trees,
            "max_depth": max_depth if max_depth is not None else "None",
            "mae": overall_mae
        })

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        plt.figure(figsize=(10, 5))
        plt.plot(y_test, label="–ò—Å—Ç–∏–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", alpha=0.7)
        plt.plot(y_pred, label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", alpha=0.7)
        plt.title(f"SEQ={seq_len}, trees={n_trees}, depth={max_depth} | MAE={overall_mae:.4f} –º")
        plt.xlabel("–ù–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞")
        plt.ylabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º)")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.show()

# === –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
print("\nüìã –ò—Ç–æ–≥–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞:")
for result in EXPERIMENT_RESULTS:
    print(f"SEQ={result['seq_len']}, trees={result['n_trees']}, depth={result['max_depth']} ‚Üí MAE={result['mae']:.4f} –º")
