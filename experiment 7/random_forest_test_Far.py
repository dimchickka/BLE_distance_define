import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error
import joblib
from collections import defaultdict

SEQ_LENGTH = 10

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
model = joblib.load('random_forest_model_Far.pkl')

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===
df = pd.read_csv('Test_Far_Ready.txt', header=None, names=["distance", "rssi"])

X_test, y_test = [], []

# –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–∫–Ω–∞
for dist in df['distance'].unique():
    rssi_values = df[df['distance'] == dist]['rssi'].values
    for i in range(SEQ_LENGTH, len(rssi_values)):
        window = rssi_values[i-SEQ_LENGTH:i]
        X_test.append(window)
        y_test.append(dist)

X_test = np.array(X_test)
y_test = np.array(y_test)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
y_pred = model.predict(X_test)

# === –û–±—â–∞—è –æ—à–∏–±–∫–∞ ===
overall_mae = mean_absolute_error(y_test, y_pred)

# === MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é ===
mae_by_distance = defaultdict(list)
for true, pred in zip(y_test, y_pred):
    mae_by_distance[true].append(abs(true - pred))

print("üìè MAE –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é:")
for dist in sorted(mae_by_distance.keys()):
    mae = np.mean(mae_by_distance[dist])
    print(f"  –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ {dist:.2f} –º ‚Äî MAE: {mae:.4f} –º")

print(f"\nüìä –û–±—â–∏–π MAE: {overall_mae:.4f} –º")

# === –ì—Ä–∞—Ñ–∏–∫ ===
plt.figure(figsize=(10, 6))
plt.plot(y_test, label="–ò—Å—Ç–∏–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", alpha=0.7)
plt.plot(y_pred, label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", alpha=0.7)
plt.title(f"Random Forest –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è\n–û–±—â–∏–π MAE: {overall_mae:.4f} –º")
plt.xlabel("–ù–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞")
plt.ylabel("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–º)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
