import numpy as np
import matplotlib.pyplot as plt
from collections import defaultdict
import os

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞ –ö–∞–ª–º–∞–Ω–∞ ===
Q = 0.03      # –®—É–º –º–æ–¥–µ–ª–∏
R = 18.05     # –®—É–º –∏–∑–º–µ—Ä–µ–Ω–∏–π
P0 = 100      # –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DISTANCES = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 1.9, 2.1, 2.3, 2.5, 2.7, 2.9, 3.1, 3.3, 3.5, 3.7, 3.9, 4.1, 4.3, 4.5, 4.7, 4.9]    # –†–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
MAX_POINTS_PER_DISTANCE = 100             # –ú–∞–∫—Å–∏–º—É–º —Ç–æ—á–µ–∫ —Å –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
WINDOW_SIZE = 10                          # –†–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞
RESET_THRESHOLD = 3.0                     # –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–ª—è —Å–±—Ä–æ—Å–∞

# === –§–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞: —à–∞–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ===
def kalman_step(x_prev, P_prev, z, Q=Q, R=R):
    x_pred = x_prev
    P_pred = P_prev + Q

    y = z - x_pred
    S = P_pred + R
    K = P_pred / S

    x_new = x_pred + K * y
    P_new = (1 - K) * P_pred

    return x_new, P_new

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º ===
def load_data(filename):
    data_by_distance = defaultdict(list)
    with open(filename, 'r') as f:
        for line in f:
            if not line.strip():
                continue
            parts = line.strip().split(',')
            distance = float(parts[0])
            rssi = float(parts[1])
            data_by_distance[distance].append(rssi)
    return data_by_distance

# === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Å–±—Ä–æ—Å–æ–º ===
def kalman_with_reset(rssi_values, Q=Q, R=R, P0=P0, window_size=20, threshold=3.0):
    filtered = []
    reset_points = []

    x = rssi_values[0]
    P = P0
    prev_mean = x

    window = [x]

    for i, z in enumerate(rssi_values):
        x, P = kalman_step(x, P, z, Q, R)
        filtered.append(x)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∫–Ω–æ
        window.append(z)
        if len(window) > window_size:
            window.pop(0)

        # –ï—Å–ª–∏ –æ–∫–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ
        if len(window) == window_size:
            current_mean = np.mean(window)
            mean_diff = abs(current_mean - prev_mean)

            if mean_diff > threshold:
                print(f"üîÑ –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞ –Ω–∞ —à–∞–≥–µ {i}, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ: {mean_diff:.2f} –¥–ë")
                x = current_mean
                P = P0
                prev_mean = current_mean
                reset_points.append(i)

    return filtered, reset_points

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª ===
def save_filtered_data(filtered_rssi, distances_list, points_per_distance, filename="filteredData.txt"):
    with open(filename, 'w') as f:
        idx = 0
        for dist in distances_list:
            count = points_per_distance[idx]
            for i in range(count):
                rssi_val = filtered_rssi[i + sum(points_per_distance[:idx])]
                f.write(f"{dist},{rssi_val:.2f}\n")
            idx += 1
    print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

# === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===
def plot_results(original, filtered, reset_points, distances_list, points_per_distance):
    plt.figure(figsize=(16, 7))

    colors = plt.cm.tab10(np.linspace(0, 1, len(distances_list)))

    # –û—Ä–∏–≥–∏–Ω–∞–ª –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    plt.plot(original, label='–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π RSSI', alpha=0.7, marker='o', markersize=3)
    plt.plot(filtered, label='–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π RSSI', linewidth=2)

    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–∫–æ–≤
    cumulative = 0
    for idx, dist in enumerate(distances_list):
        cumulative += points_per_distance[idx]
        plt.axvline(x=cumulative, color='gray', linestyle='--', alpha=0.5)
        plt.text(cumulative + 2, min(original), f"{dist} –º", rotation=90, va='bottom', fontsize=10)

    # –¢–æ—á–∫–∏ —Å–±—Ä–æ—Å–∞
    for rp in reset_points:
        plt.axvline(x=rp, color='red', linestyle='--', alpha=0.5, linewidth=1)

    plt.title("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è RSSI –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º–∏\n(Q=%.2f, R=%.2f, P0=%.2f)" % (Q, R, P0))
    plt.xlabel('–í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥')
    plt.ylabel('RSSI (dBm)')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    filename = "../data.txt"
    output_file = "filteredDataLearning.txt"
    data_by_distance = load_data(filename)

    combined_rssi = []
    points_per_distance = []
    distances_list = []

    for dist in DISTANCES:
        dist_key = round(dist, 2)
        if dist_key not in data_by_distance:
            print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è {dist_key} –º")
            continue

        samples = data_by_distance[dist_key][:MAX_POINTS_PER_DISTANCE]
        combined_rssi.extend(samples)
        points_per_distance.append(len(samples))
        distances_list.append(dist_key)

    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ—á–µ–∫: {len(combined_rssi)}")
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º:", points_per_distance)

    # === –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Å–±—Ä–æ—Å–æ–º ===
    filtered_rssi, reset_indices = kalman_with_reset(
        combined_rssi,
        Q=Q,
        R=R,
        P0=P0,
        window_size=WINDOW_SIZE,
        threshold=RESET_THRESHOLD
    )

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª ===
    save_filtered_data(filtered_rssi, distances_list, points_per_distance, output_file)

    # === –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
    plot_results(combined_rssi, filtered_rssi, reset_indices, distances_list, points_per_distance)